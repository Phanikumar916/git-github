Suppose we add a Series of Commands in One Server
Now we want to Execute Same Commands in Multiple Servers (This is repetitive work right)
So we can Write the Commands in a file then we can execute a file 
File is Movable, So we can copy the file in another servers, we can share it with our teammates 

So bunch of Shell Commands is called " SHELL SCRPTING "
Shell Scripts have " .sh " file extension

WHAT IS SHELL
SHELL - THE PROGRAMME THAT INTERPRETS AND EXECUTES THE VARIOUS COMMANDS THAT WE TYPE IN THE TERMINAL
TRANSLATES OUR COMMAND THAT THE OS KERNEL CAN UNDERSTAND
IT IS THE INTERFACE BETWEEN THE USER AND THE KERNEL

DIFFERENT SHELL IMPLEMENTATIONS

sh (Bourne Shell)  - /bin/sh (Bourne Shell Programme Located in /bin/sh)
used to be default shell programme for the UNIX like systems including Many older versions of LINUX systems
The name BOURNE SHELL coming from the author STEPHEN BOURNE

NEWER VESIONS OF LINUX DISTRIBUTIONS WE HAVE A SHELL PROGRAMME CALLED BASH
" BASH STANDS FOR -  BOURNE AGAIN SHELL "

 " BASH - /bin/bash "
 IMPROVED VERSION OF sh (BOURNE SHELL)
 Default shell programme for most UNIX like systems
 
 it is the best standard for UNIX Like systems
 
 Shell and Bash Terms are often used Interchangeable
 
 Bash is a Shell Programme
 Bash is a Programming Language
 
 
 
 *************** BASH SCRIPTING
 
 SHEBANG
 
 Now create a file (with .sh means it is a shell script file)
Ex: touch setup.sh

Now if we create no.of Shell Script Files, All the Shell Script files have the same Extension .sh file extension
so how does O.S know which shell to use to interpret and to process the script file
We may have multiple shell programms on the system (like sh, Bash, ZSH )
We need to tell the system which shell programme to use to interpret the script

SO BY WRITING ******** SHEBANG ****** LINE WE CAN DIFFERENTIATE 
BY WRITING THE SHEBANG LINE OF THE SCRIPT WE CAN TELL WHICH SHELL TO THE O.S

#!/bin/sh - SH
#!/bin/bash - BASH
#!/bin/zsh - ZSH

ex: you have create setup.sh file
then edit by using ( vim setup.sh )
first line we will write shebang line
#!/bin/bash (this tells o.s it was bash syntax, please use bash programme to process the file)
/bin/bash - the location of the bash programme

SHEBANG

 ***************** IN MUSICAL NOTATION " # " IS CALLED SHARP AND " ! " IS CALLED BANG ********************

 ********** SO SHEBANG BECAME A SHORTENING OF SHARP-BANG **********


BASIC SCRIPT

vim setup.sh
#!/bin/bash
echo "setup and configure server" (here echo means whatever we write it will print it)

" ./ " to execute the file
ex: ./setup.sh (by defualt when we create any file it will not have any executable permissions)
now we need to give executable permissions
sudo chmod u+x setup.sh (only user we are giving executable permission)
now if we execute o/p will come



****************************************** VARIABLES ******************************************

VARIABLES

USED TO STORE DATA AND CAN BE REFERENCED LATER
SIMILAR TO VARIABLES IN GENERAL PROGRAMMING LANGUAGES

SYNTAX - "  variable_name=value  " - Assigns the value of the variable
there must be no spaces around the " = " sign

ex: file_name=config.yaml

REFERENCING VARIABLES

SYNTAX - " $variable_name "

ex: echo " using file $file_name to configure something "

TO STORE OUTPUT COMMAND IN A VARIABLE

variable_name=$(command)
(ex: config_files=$(ls config)


CONDITIONAL STATEMENTS

CONDITIONALS
ALLOW YOU TO ALTER THE CONTROL FLOW OF THE PROGRAMME
EX: EXECUTE A COMMAND ONLY CONDITION IS TRUE

IF STATEMENTS

SYNTAX: if [...]
SQUARE BRACKETS ENCLOSE EXPRESSIONS
IT IS A SHORT HAND NOTATION FOR THE " test " command 

EX: if [ "config" ] or if test "config"

LOGIC

if [ CONDITION ]
then
   statement
else
   statement
fi

EX: 
if [ -d "config" ]
then (IF IT IS YES)
    echo "reading config directory"
    config_files=$(ls config)
else (IF IT IS NO)
    echo "create directory"
    mkdir config
fi (programme will know it is end by typing fi)



RELATIONAL OPERATORS

Works only for numeric values
Will Work to check relation between 10 and 20 as well as between 10 and 20

ex: if [ num_files -gt 10 ] (here  -gt means greater than)
WITH NUMBER COMAPRISIONS FOR EXAMPLE WE CAN CHECK WEAHTER THE PORT THAT APPLICATION IS RUNNING IS EQUAL TO THAT SPECIFIC VALUE OR
MAY BE NO.OF PROCESSORS IS RUNNING HIGHER THAN AN EXCEPTED VALUE 


STRING OPERATORS

HERE WE WILL COMAPRE SET OF CHARACTERS TO STRINGS

" == " IS BASH SPECIFIC STANDARD (WHICH MEANS IT IS CROSS COMPATIABLE FOR ALL SHELL PROGRAMMS)
" = " IS POSIX SPECIFIC STANDARD

SYNTAX: if [ "$user_group" == "nana" ]
Already we know the variables syntax " variable_name=value "

ex: if [ "user_group" == "nana" ]
    then
    echo "configure the server"
    else
    echo " No permission to configure server "
    fi
 We can compare two strings with each other by using " == " 
 If we want to check two different values (ex: if the value is nana other than nana if we want to check another user group like phani
 then we will use " elseif statement " (if the both the values were not true it will print No permission to configure server
 Now how we will write is 
 
 ex: if [ "user_group" == "nana" ]
    then
    echo "configure the nana server"
    elseif [ "user_group == "admin" ]
    then
    echo "configure the admin server"
    else
    echo " No permission to configure server "
    fi



PASSING ARGUMENTS TO A SCRIPT

We can provide parameters to the script when we execute them
ex: we want to provide user_group as a parameter and we want to read the parameter

TO READ A PARAMERER PROVIDE IN BASH EXECUTION WE HAVE A SPECIAL VARIABLE, WE CAN ACCESS USING SYNTAX
THE SYNTAX OF ACCESSING ANY VARIABLE IS ******************   $ (DOLLAR SIGN) **********************


POSITIONAL PARAMETERS

Aruguments Passed to script are processed in the same order in which they are sent
The Indexing of Arguments starts at " 1 "
Parameters Starts from $1 to $9
1 means first parameter 
Value Stored in Parameter, we can assign to a variable (variable_name) and we can use and refer that variable throughout our script
While Executing ./setup.sh each parameter can be executed by space (./setup.sh xyz abc) - here xyz defines first parameter
abc defines second parameter

ex: " user_group=$1 (1 indicates while executing the Script file ./setup.sh 


ex: " user_group=$1 "  - 1 indicates the first parameter that we pass through bash script
basically we are assigning a parameter variable that we get outside to a user_group variable an
d we are using a user group 
variable to check its value

ex: 
    user_group=$1
    if [ "$user_group" == "nana" ]
    then
    echo "configure the nana server"
    elseif [ "$user_group == "admin" ]
    then
    echo "configure the admin server"
    else
    echo " No permission to configure server "
    fi


********* if we want to remove lines in " VIM EDITOR " go to insert mode and type d10 (means 10 lines it will remove) **************




READ USER INPUT

HERE WE NEED TO ENTER THE VARIABLE WE WANT

read -p "please enter your password" user_pwd


SPECIAL VARIABLE

" $* " Represents all arguments as a single string 
ex: echo " all params $* "

" $# " - Represents Total no.of arguments provided
ex: echo " no. of parmas $# " after execution it will show how many parameters are having for example 1 or 2 or 3 e.t.c like that




****************************************   SHELL LOOPS ******************************************************

When we are working List of No.s, Characters, Strings, files e.t.c we are working with concept called loops.

ENABLE TO EXECUTE A SET OF COMMANDS REPEATEDLY

DIFFERENT TYPES OF LOOPS

WHILE LOOP
FOR LOOP
UNTIL LOOP
SELECT LOOP


FOR LOOP

OPERATES ON LISTS OF ITEMS
REPEATS A SET OF COMMANDS FOR EVERY ITEM IN THE LIST
TO READ PARAMETERS VALUES ONE BY ONE FROM THE PARAMETERS LIST WE GONNA USE FOR LOOP
WHENEVER WHE ARE HAVING A LIST OF SERVERS OR LIST OF PROGRAMMS OR LIST OF SOFTWARE YOU WANT TO INSTALL YOUR GONNA USE FOR LOOP
WHENEVER WE WANT TO EXECUTE SOMETHING NO.OF TIMES OR FOR EACH ITEM ATLEAST THATS WHAT FOR LOOP IS FOR 


SYNTAX

for " variable " in Word1 Word2 ..... (ex: for param in $*) - here param is varialbe
 do
  statement(s) to be executed in every word
done

ex: 
param=$1

for param in $*
 do
  echo $param
 done


WHILE LOOP

WHICH IS NOT USED FOR ITERATING THROUGH A LIST AND DOING SOMETHING FOR EACH ITEM 
IT IS LOOP THAT RUNS WHILE A SET OF CONDITIONS IS MATCHED
EXECUTE AS A SET OF COMMANDS REPEATEDLY UNTIL SOME CONDITION IS MATCHED

SYNTAX:

while  " condition " 
do
statement(s) to be executed if command is true
done


***** IF YOU SEE BASH SCRIPT WITH DOUBLE SQUARE BRACKETS IT HAS MORE FEATURES THAN SINGLE BRACKET *********
ONE OF THE IMPORTANT THING IS WHEN YOU USE DOUBLE BRACKETS YOU NEED NOT ENCLOSE THE VARIABLE NAME IN QUOTES
ex: [[ $score == "q" ]] - here varibale $score need not include in quotes like "$score"

  


********************** FUNCTIONS *************************************************************************

FUNCTIONS
Enable you to break down the overall functionality of a script into smaller and logical code blocks like
If you want to execute the similar logic in three different places in your script then you can save that code into function and then you
can reference you function in that script
function is used to group things together and give them some logical names so that your script is easier to read and maintain

function name () {
  list of commands
}

The above code block can be referenced any where in the script multiple times


COMMENTING

IN BASH WHEN EVER YOU START LINE WITH POUND # CHARACTER IT WILL BE IGNORED BY PROGRAMME, IT NOT CAN BE EXECUTED AS A COMMAND


BOOLEAN PARAMETER

A datatype that can only have two values
" TRUE OR FALSE " 

***********************    " $? "  - CAPTURES RETURN VALUE BY LAST COMMAND **************************************************



