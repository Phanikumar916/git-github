MONOLITHIC

ALL COMPONENTS ARE PART OF SINGLE UNIT
ALL CODES FOR (USER-AUTH, PRODUCT-CATLOG, SHOPPING CART & PAYMENT) WILL BE IN ONE CODEBASE
EVERYTHING DEVELOPED, DEPLOYED AND SCALED IN ONE UNIT
ONE SINGLE ARTIFACT, SO YOU MUST REDEPLOY THE ENTIRE APPLICATION ON EACH UPDATE

CHALLENGES:
APPLICATION IS TOO LARGE AND COMPLEX
PARTS ARE MORE TANGLED INTO EACH OTHER
YOU WOULD WANT TO SCALE ONLY SPECIFIC PART OF THE APPLICATION YOU CANT DO IT YOU NEED TO SCALE THE WHOLE APPLICATION
YOU CAN ONLY SCALE THE ENTIRE APP INSTEAD OF SPECIFIC SERVICE
RELEASE PROCESS TAKES LONGER
ON EVERY CHANGE THE ENTIRE APPLICATION NEEDS TO BE TESTED
BUG IN ANY MODULE CAN POTENTIALY BRING DOWN THE ENTIRE APLLICATION


MICROSERVICES

BREAKDOWN THE APPLICATION INTO MULTIPLE SMALLER APPLICATION
SEVERAL SMALL APPLICATIONS THAT MAKE UP ONE BIG APPLICATION
EACH MICRO SERVICE HAS ITS OWN VERSION
3 WAYS TO COMMUNICATE EACH MICROSERVICES
              1. API
              2. MESSAGE BROKER (RABBIT MQ)
              3. COMMUNICATION VIA SERVICE MESH (KUBERNETES)

KUBERNETES IS THE BEST PLATFORM FOR RUNNING LARGE MICROSERVICES APPLICATIONS

MONO REPO: MEANS USING ONE GIT REPOSITORY THAT CONTAINS MANY PROJECTS
A FOLDER FOR EACH SERVICE OR PROJECT
CLONE AND WORK WITH ONLY ONE REPOSITORY

POLY REPO: ONE REPOSITORY FOR EACH SERVICE
CODE IS COMPLETELY ISOLATED
CLONE AND WORK THEM SEPERATELY
